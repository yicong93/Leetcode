Divide and Conquer:

class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        return self.helper(nums,0,len(nums)-1)
    
    def helper(self,nums,left,right):
        if left==right:
            return nums[left]
        p=(left+right)//2
        leftsum=self.helper(nums,left,p)
        rightsum=self.helper(nums,p+1,right)
        crosssum=self.cross_sum(nums,left,p,right)
        return max(leftsum,rightsum,crosssum)
        
    def cross_sum(self,nums,left,p,right):
        if left==right:
            return nums[left]
        max_sum_left=float('-inf')
        curr_sum_left=0
        for i in range(p,left-1,-1):
            curr_sum_left+=nums[i]
            max_sum_left=max(max_sum_left,curr_sum_left)
        
        max_sum_right=float('-inf')
        curr_sum_right=0
        for j in range(p+1,right+1):
            curr_sum_right+=nums[j]
            max_sum_right=max(max_sum_right,curr_sum_right)
        return max_sum_left+max_sum_right
        
        # time: o(nlogn)
        #space: o(logn)
        

Greedy:
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        curr_sum=max_sum=nums[0]
        for i in range(1,len(nums)):
                curr_sum=max(nums[i],curr_sum+nums[i])
                max_sum=max(max_sum,curr_sum)
        return max_sum 
        # time: o(n)
        #space: o(1)
