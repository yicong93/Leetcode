class Solution:
    def minPathSum(self, grid: List[List[int]]) -> int:
        for i in range(len(grid)-1,-1,-1):
            for j in range(len(grid[0])-1,-1,-1):
                if i==len(grid)-1 and j!=len(grid[0])-1:
                    grid[i][j]=grid[i][j]+grid[i][j+1]
                elif i!=len(grid)-1 and j==len(grid[0])-1:
                    grid[i][j]=grid[i][j]+grid[i+1][j]
                elif i!=len(grid)-1 and j!=len(grid[0])-1:
                    grid[i][j]=grid[i][j]+min(grid[i][j+1],grid[i+1][j])
        return grid[0][0]
        
        # time:o(m*n)
        # space:o(1)

        
        
        
        
  
  class Solution(object):
    def minPathSum(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        return self.helper(grid,0,0)
    
    def helper(self,grid,i,j):
        if i==len(grid) or j ==len(grid[0]):
            return float('inf')
        if i==len(grid)-1 and j==len(grid[0])-1:
            return grid[i][j]
        return grid[i][j]+min(self.helper(grid,i+1,j),self.helper(grid,i,j+1))
    
    
# time:o(2^(m+n))
# space:o(m+n)
