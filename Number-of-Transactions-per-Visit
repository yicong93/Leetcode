with a as (
select v.user_id, v.visit_date,sum(case when t.transaction_date is not null then 1 else 0 end) as transaction_count
from Visits v left join Transactions t on v.user_id=t.user_id
and v.visit_date=t.transaction_date
group by v.user_id,v.visit_date
),
b as (
select a.transaction_count as transactions_count, count(*) as visits_count
from a 
group by a.transaction_count 
),
c as (
select 0 as transactions_count,max(b.transactions_count) as tem from b
union all
select transactions_count+1,tem from c
where transactions_count<tem
)

select c.transactions_count, isnull(b.visits_count,0) as visits_count
from c left join b on c.transactions_count=b.transactions_count
order by c.transactions_count;

Comments:
# ifnull -> mysql
# isnull -> sql server
# recursive CTE:
  1.An initial query that returns the base result set of the CTE. The initial query is called an anchor member.
  2.A recursive query that references the common table expression, therefore, it is called the recursive member. The recursive member is union-ed with the anchor member using the UNION ALL operator.
  3.A termination condition specified in the recursive member that terminates the execution of the recursive member.
