# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def hasCycle(self, head: ListNode) -> bool:
        if not head or not head.next:
            return False
        slow=head
        fast=head.next
        while fast and fast.next:
            if slow==fast:
                return True
            slow=slow.next
            fast=fast.next.next
        return False
   # two pointer     
        

# hash table
class Solution:
    def hasCycle(self, head: ListNode) -> bool:
        nodeseen=set()
        while head:
            if head in nodeseen:
                return True
            else:
                nodeseen.add(head)
            head=head.next
        return False
        
   # time:o(n)
   # space:o(n)
