# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> ListNode:
        if headA == None or headB == None:
            return None

        A_pointer = headA
        B_pointer = headB

        while A_pointer != B_pointer:
            A_pointer = headB if A_pointer is None else A_pointer.next
            B_pointer = headA if B_pointer is None else B_pointer.next

        return A_pointer
        
   
class Solution:
    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> ListNode:
        hashset=set()
        while headA:
            hashset.add(headA)
            headA=headA.next
        while headB:
            if headB in hashset:
                return headB
            headB=headB.next
        return None
        
        time:o(n+m)
        space:o(n) or o(m)
