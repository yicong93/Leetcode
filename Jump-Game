class Solution:
    def canJump(self, nums: List[int]) -> bool:
        lastpos=len(nums)-1
        for i in range(len(nums)-1,-1,-1):
            if nums[i]+i>=lastpos:
                lastpos=i
        return lastpos==0
    
    
 
   '''
   Mindset:
   We call a position in the array a "good index" if starting at that position,we can reach the last index. Otherwise, that index is called a "bad index".The problem then reduces to whether or not index 0 is a "good index".
   '''
   
Greedy:
    # Iterating right-to-left, for each position we check if there is a potential jump that reaches a GOOD index 
    # (currPosition + nums[currPosition] >= leftmostGoodIndex).  
    # If we can reach a GOOD index, then our position is itself GOOD. 
    # Also, this new GOOD position will be the new leftmost GOOD index.  
    # Iteration continues until the beginning of the array. If first position is a GOOD index then we can reach the last index from the first position.
