# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def bstFromPreorder(self, preorder: List[int]) -> TreeNode:
        n=len(preorder)
        if not n:
            return None
        root=TreeNode(preorder[0])
        stack=[root,]
        for i in range(1,n):
            node,child=stack[-1],TreeNode(preorder[i])
            while stack and stack[-1].val<child.val:
                node=stack.pop()
            if node.val<child.val:
                node.right=child
            else:
                node.left=child
            stack.append(child)
            
        return root
       
       
class Solution:
    def bstFromPreorder(self, preorder: List[int]) -> TreeNode:       
        def helper(lower,upper):
            nonlocal idx
            if idx==n:
                return None
            val=preorder[idx]
            if val<lower or val>upper:
                return None
            idx+=1
            root=TreeNode(val)
            root.left=helper(lower,val)
            root.right=helper(val,upper)
            return root
       
        idx=0
        n=len(preorder)
        return helper(float('-inf'),float('inf'))
